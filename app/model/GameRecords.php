<?php


namespace app\model;


use app\traits\TraitModel;
use think\Model;

class GameRecords extends Model
{
    use TraitModel;

    public $name = 'dianji_records';
    public static $getCloseStatus = [1 => '待开牌', 2 => '已结算', 3 => '台面作废', 4 => '修改结果'];
    public static $getAgentStatus = [1 => '洗码结算', 2 => '未结算', 9 => '代理已结算'];//全部结算

    public static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    //统计数据
    public function count_money($date = null, $where = [])
    {
        //时间统计
        $res = $this->this_where_date_model($this->alias('a'), $date, 'created_at');
        //查询代理下的所有用户
        $count = $res->where($where)
            ->field('sum(bet_amt) t_bet_amt,sum(win_amt) t_win_amt,sum(shuffling_num) t_shuffling_num,sum(shuffling_amt) t_shuffling_amt')
            ->select();
        if (empty($count)) return $count;
        $count = $count->toArray()[0];
        foreach ($count as $key => &$value) {
            $value = floatval($value);
        }
        return $count;
    }

    public static function page_list($map, $limit, $page, $date)
    {
        $list = self::where_date_model(self::alias('a'), $date, 'a.created_at');
        //查询代理下的所有用户
        return $list->where($map)
            ->join('common_user b', 'a.user_id = b.id', 'left')
            ->join((new GameType())->name . ' c', 'a.game_type = c.id', 'left')
            ->field('a.*,b.user_name,c.type_name')
            ->order('id desc')
            ->paginate(['list_rows' => $limit, 'page' => $page], false)
            ->each(function ($item, $key) {
                if (strlen($item['detail']) > 5) {
                    $item['detail'] = explode('||', $item['detail'])[0];
                }
                $item->close_status_text = '';
                if (isset(self::$getCloseStatus[$item['close_status']])) {
                    return $item->close_status_text = self::$getCloseStatus[$item['close_status']];
                }
            });
    }

    //盈亏排行查询，只查询当日
    public static function profit_list($map, $limit, $page, $date = [])
    {
        $model = self::alias('a');
        //得到查询的时间点
        $model = self::where_date_model($model, $date);
        //查询用户是否被冻结，用于踢下线
        $model = $model->join('common_user b', 'a.user_id = b.id', 'left');
        //分组统计今日用户获得金额排行
        $model = $model->field('sum(win_amt)  money,sum(bet_amt)  t_bet_amt,user_id,status,user_name,money_balance')
            ->where('close_status', 'in', '1,2')
            ->where($map)
            ->group('user_id');
        return $model->order('money desc')
            ->paginate(['list_rows' => $limit, 'page' => $page], false)
            ->each(function ($item, $key) {
                $item['money'] = MoneyLog::where('uid', $item['user_id'])
                    ->whereTime('create_time', 'today')
                    ->where('status', 'in', MoneyLog::$game_order_status)
                    ->sum('money');
            });
    }



//     //统计订单数
//    public function count_order($date = null,$name = null)
//    {
//        //时间统计
//        $res = $this->where_date($date,'created_at');
//        //查询代理下的所有用户
//        $map = $this->whereMapUserAll('b');
//        $where[] =['close_status','in','1,2'];
//        $where[] =['is_fictitious','=',0];
//
//        if ($name != null ){ //查询该用户
//            $find = UserModel::where('user_name',$name)->find();
//            if (!empty($find)) {
//                $where[] = ['user_id','=',$find->id];
//            }
//        }
//
//        $count = $res->alias('a')
//            ->join('common_user b','a.user_id=b.id','left')
//            ->where($map)
//            ->where($where)
//            ->count();
//        return $count;
//    }




//    /**
//     * /用户当前局免佣状态
//     * @param $table_id /台座ID
//     * @param $number /靴号铺号
//     * @param $user /用户信息
//     * @param $is_order /是否需要知道 是否下单过 下单判断免佣会用到
//     * return 默认 is_exempt = 1; $is_exempt->is_exempt查出是0 还是1
//     */
//    public static function user_status_bureau_number_is_exempt($table_id, $number, $user, $is_order = false)
//    {
//        $is_exempt = self::where([
//            'xue_number' => $number['xue_number'],
//            'pu_number' => $number['pu_number'],
//            'table_id' => $table_id,
//            'user_id' => $user['id']
//        ])
//            ->whereTime('created_at', 'today')
//            ->order('created_at desc')
//            ->find();
//
//        #------获取是否下单过开始 下单会用到 101表示没下单过
//        if ($is_order == true && empty($is_exempt)) {
//            return 101;
//        }
//        #------获取是否下单过结束
//
//        #####获取当前用户当前局免佣状态
//        if (!empty($is_exempt)) {
//            return $is_exempt->is_exempt;
//        }
//        return 0;
//        #####获取当前用户当前局免佣状态结束
//    }

    //本局游戏总共下注金额
    public static function user_count_money_game_this($table_id, $xue_number, $peilv, $user)
    {
        $money = self::where([
            'xue_number' => $xue_number['xue_number'],
            'pu_number' => $xue_number['pu_number'],
            'table_id' => $table_id,
            'user_id' => $user['id'],
            'game_peilv_id' => $peilv
        ])
            ->whereTime('created_at', 'today')
            ->count('bet_amt');
        return $money;
    }

    ############### 查询的是昨日 统计会员每日 输 赢 总赢 洗码，非洗码 洗码总赢 #############################################
    //查询昨日的   总下注  洗码量  总输赢赢
    public static function count_user_bet_win_shuffling($day = 'yesterday')
    {
        //bet_amt总下注 总shuffling洗码量  win总赢
        $res = self::alias('a')->field('
        sum(bet_amt) game_bet,
        sum(shuffling_num) game_shuffling_num,
         sum(win_amt) game_win_count,user_id
        ')
            ->join('common_user b', 'a.user_id=b.id', 'left')
            ->whereDay('created_at', $day)
            ->where('is_fictitious', 0)
            ->where('close_status', 2)
            ->group('user_id')
            ->select()
            ->toArray();
        return self::win_merge($res);
    }

    //查询用户昨日的洗码和非洗码
    public static function count_user_shuffling_num($day = 'yesterday')
    {
        $ok_exempt = self::alias('a')->field('sum(shuffling_num) game_is_ok_shuffling,user_id')
            ->where('is_exempt', 1)
            ->whereDay('created_at', $day)
            ->join('common_user b', 'a.user_id=b.id', 'left')
            ->where('is_fictitious', 0)
            ->where('close_status', 2)
            ->group('user_id')
            ->select()
            ->toArray();
        $ok_exempt = self::win_merge($ok_exempt);
        $no_exempt = self::alias('a')->field('sum(shuffling_num) game_is_no_shuffling,user_id')
            ->where('is_exempt', 0)
            ->whereDay('created_at', $day)
            ->join('common_user b', 'a.user_id=b.id', 'left')
            ->where('is_fictitious', 0)
            ->where('close_status', 2)
            ->group('user_id')
            ->select()
            ->toArray();
        $no_exempt = self::win_merge($no_exempt);
        $array = self::win_merge_all($ok_exempt, 'game_is_ok_shuffling');
        return self::win_merge_all($no_exempt, 'game_is_no_shuffling', $array);

    }

    //查询用户的总输和总赢
    public static function count_user_bet_win($day = 'yesterday')
    {
        //会员总赢
        $win = self::alias('a')->field('sum(win_amt) game_win,user_id')
            ->where('win_amt', '>', 0)
            ->whereDay('created_at', $day)
            ->join('common_user b', 'a.user_id=b.id', 'left')
            ->where('is_fictitious', 0)
            ->where('close_status', 2)
            ->group('user_id')
            ->select()
            ->toArray();
        $win = self::win_merge($win);
        //会员总输
        $transport = self::alias('a')->field('sum(win_amt) game_transport,user_id')
            ->where('win_amt', '<', 0)
            ->whereDay('created_at', $day)
            ->join('common_user b', 'a.user_id=b.id', 'left')
            ->where('is_fictitious', 0)
            ->where('close_status', 2)
            ->group('user_id')
            ->select()
            ->toArray();

        $transport = self::win_merge($transport);
        $array = self::win_merge_all($win, 'game_win');
        return self::win_merge_all($transport, 'game_transport', $array);
    }

    private static function win_merge($array)
    {
        $array_merge = [];
        if (empty($array)) return [];
        foreach ($array as $key => $value) {
            $array_merge[$value['user_id']] = $value;
        }
        return $array_merge;
    }

    private static function win_merge_all($win, $name = '', $array = [])
    {
        if (empty($win)) return $array;
        foreach ($win as $key => $value) {
            !isset($value[$name]) && $value[$name] = 0;
            if (array_key_exists($value['user_id'], $array)) {
                $array[$value['user_id']][$name] = $value[$name];
            } else {
                $array[$value['user_id']][$name] = $value[$name];
                $array[$value['user_id']]['user_id'] = $value['user_id'];
            }
        }
        return $array;
    }
    ############################################################

    /**统计用户的 金额，或者是下注金额 $field决定
     * @param $map /查询条件
     * @param $date /时间查询
     * @param string $field /查询的字段
     * @return mixed
     */
    public function count_order_bet_sum($map, $date, $field = 'bet_amt')
    {
        $res = $this->where_date_model($this, $date, 'created_at');
        return $res->where($map)->sum($field);
    }

    /**
     * 统计下注的条数
     * @param $map /查询条件
     * @param $date /时间查询
     * @return mixed
     */
    public function count_order_bet($map, $date)
    {
        $res = $this->where_date_model($this, $date, 'created_at');
        return $res->where($map)->count();
    }

}