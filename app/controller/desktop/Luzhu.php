<?php


namespace app\controller\desktop;

use app\controller\Base;

use app\model\AgentLavel;
use app\model\GameRecords;
use app\model\GameType;
use app\model\Luzhu as models;
use app\model\MoneyLog;
use app\model\Notify;
use app\model\Table;
use app\model\UserModel;
use app\model\UserSet;
use app\traits\PublicCrudTrait;
use think\facade\Db;


class Luzhu extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 露珠控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    
    public function newdel($id)
    {
        Db::table('ntp_dianji_lu_zhu')->delete($id);
        Db::table('ntp_dianji_lu_zhu_heguan')->delete($id);
        Db::table('ntp_dianji_lu_zhu_open_pai')->delete($id);
        return 'ok';
    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = $date = [];

        isset($post['table_id']) && $map [] = ['table_id', '=', $post['table_id']];
        $map[] = ['a.status', '=', 1];

        isset($post['start']) && $date['start'] = $post['start'];
        isset($post['end']) && $date['end'] = $post['end'];
        isset($post['xue']) && $map[] = ['a.xue_number', '=', $post['xue']];
        isset($post['pu']) && $map[] = ['a.pu_number', '=', $post['pu']];

        $list = $this->model->page_list($map, $limit, $page, $date);
         $this->success($list);
    }

    //露珠增加
    public function add()
    {
        //过滤数据
        $postField = 'status,table_id,game_type,result,result_pai,xue_number,pu_number';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        $find = $this->model->where([
            'table_id' => $post['table_id'], 'xue_number' => $post['xue_number'], 'pu_number' => $post['pu_number']
        ])
            ->find();
        if ($find)  $this->failed('该桌靴号铺号已存在');
        $post['game_type'] = Table::where('id', $post['table_id'])->value('game_type');

        $save = $this->model->save($post);
        if ($save)  $this->success([]);
         $this->failed('新增失败');
    }

    public function edit()
    {
        //过滤数据
        $postField = 'id,table_id,game_type,result,result_pai,xue_number,pu_number,status';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        if (is_array($post['id']) || $post['id'] <= 0) return $this->failed('ID不存在');
        //查询是否重复的该菜单
        $find = $this->model->where([
            'table_id' => $post['table_id'], 'xue_number' => $post['xue_number'], 'pu_number' => $post['pu_number']
        ])
            ->where('id', '<>', $post['id'])->find();
        if ($find) return $this->failed('该桌靴号铺号已存在');
        $post['game_type'] = Table::where('id', $post['table_id'])->value('game_type');
        //执行修改数据
        $save = $this->model->update($post);
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    //露珠退还 金额，洗码费，代理费，只能退换 24小时内的
    /**
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * 原版的退还记录
     * 仅仅退还的是 投注记录 没有退还押金记录
     */
//    public function retreat()
//    {
//        $id = $this->request->post('id/d', 0);
//        if ($id <= 0) $this->failed('id参数错误');
//        //1 查询露珠信息订单
//        $lzfind = $this->model->where('id', $id)->find();
//        if (empty($lzfind)) $this->failed('数据不存在');
//        $lzfind = $lzfind->getData();
//        //判断是否超过了24小时
//
//        if ($lzfind['create_time'] + (24 * 60 * 60) < time()) {
//            $this->failed('只能结算24小时内订单');
//        }
//
//        //2 查询该露珠下注的金额
//        $records_list = GameRecords::where(['lu_zhu_id' => $id, 'close_status' => 2])
//            ->field('id,user_id,lu_zhu_id,win_amt,shuffling_amt,shuffling_rate,agent_status,is_exempt')
//            ->select()
//            ->toArray();
//
//        if (empty($records_list)) {
//            $this->model->where('id', $id)->update(['status' => 3, 'remark' => '作废人：ID-' . session('admin_user.id') . '名称：' . session('admin_user.user_name'), 'update_time' => time()]);
//            $this->success([]);
//        }
//
//        //查询每个本局的所有输赢，返回给用户的金额 //本局所有下注的用户和输赢
//        // 增加了 对押金的统计
//        $user_records_list = GameRecords::where(['lu_zhu_id' => $id, 'close_status' => 2])
//            ->field('user_id,sum(deposit_amt) user_deposit_amt,sum(win_amt) user_win_amt,sum(shuffling_amt) xima_amt,sum(shuffling_num) xima_sum,game_type,agent_status,is_exempt')
//            ->group('user_id')
//            ->select()
//            ->toArray();
//
//        //3 退还该露珠的金额
//        $save = false;
//        $user_id_list = [];
//        Db::startTrans();
//        try {
//            $this->model->where('id', $id)->update(['status' => 3, 'remark' => '作废人：ID-' . session('admin_user.id') . '名称：' . session('admin_user.user_name'), 'update_time' => time()]);
//            GameRecords::where(['lu_zhu_id' => $id])->update(['close_status' => 3]);
//
//            foreach ($user_records_list as $key => $value) {
//                $find = UserModel::where('id', $value['user_id'])->lock(true)->find();
//                $value['user_win_amt'] = $value['user_win_amt'] - $value['user_deposit_amt'];   // 增加了 对押金的退还 押金是正的 所以减去
//                if (empty($find)) continue;
//                //返回用户下注金额  如果是输了的  负负的正，就是加上了
//                if ($value['is_exempt'] == 1 || $value['agent_status'] == 0) {//免佣无洗码费，洗码费还没结算
//                    $value['xima_amt'] = 0;
//                    UserModel::where('id', $value['user_id'])
//                        ->dec('money_balance', $value['user_win_amt'])//下注扣除
//                        ->update();
//                } else {
//                    UserModel::where('id', $value['user_id'])
//                        ->dec('money_freeze', $value['xima_amt'])//洗码费扣除
//                        ->dec('money_balance', $value['user_win_amt'])//下注扣
//                        ->update();
//                }
//
//                //插入资金记录
//                $money = $value['user_win_amt'] * -1;
//                $mark = $value['user_win_amt'] > 0 ? '露珠作废扣除下注金额：' . $money : '露珠作废返回下注金额：' . $money;
//
//                MoneyLog::post_insert_log(2, 509,
//                    $find->money_balance, $find->money_balance - $value['user_win_amt'],
//                    $money, $find->id, $id,
//                    $mark . ',洗码费扣除：' . $value['xima_amt']
//                );
//                array_push($user_id_list, $find->id . '-');
//                ########返回用户下注金额 洗码费结束
//                ###返代理洗码费开始#############
//                //1 获取用户的所有代理
//                if ($value['is_exempt'] == 1 || $value['agent_status'] == 0) continue;
//                if ($find->agent_id <= 0) continue;
//                $agent_list = AgentLavel::where('agent_id', $find->agent_id)->column('agent_pid');
//                if (empty($agent_list)) continue;
//                array_push($agent_list, $find->agent_id);
//                //2 查询代理的洗码率
//                $xima_list = UserSet::where('u_id', 'in', $agent_list)->field('xima_lv,u_id')->select()->toArray();
//                //3 返回代理洗码费
//                if (empty($xima_list)) continue;
//                foreach ($xima_list as $k => $item) {
//                    $agent_find = UserModel::where('id', $item['u_id'])->find();
//                    if (empty($find)) continue;
//                    UserModel::where('id', $item['u_id'])
//                        ->dec('money_freeze', ($value['xima_sum'] * $item['xima_lv'] / 100))//洗码费扣除
//                        ->update();
//                    array_push($user_id_list, $agent_find->id . '-');
//                    MoneyLog::post_insert_log(2, 702,
//                        $agent_find->money_freeze, $agent_find->money_freeze - ($value['xima_sum'] * $item['xima_lv'] / 100),
//                        ($value['xima_sum'] * $item['xima_lv'] / 100), $agent_find->id, $id,
//                        '露珠作废扣除洗码费扣除：' . ($value['xima_sum'] * $item['xima_lv'] / 100)
//                    );
//                }
//            }
//            $save = true;
//            // 提交事务
//            Db::commit();
//        } catch (\Exception $e) {
//            // 回滚事务
//            Db::rollback();
//        }
//        if ($save && !empty($user_id_list)) {
//            $mark = '尊敬的用户,' . date('Y-m-d H:i:s', $lzfind['create_time']) . ',' . $lzfind['table_id'] . '号' . $lzfind['xue_number'] . '靴' . $lzfind['pu_number'] . '铺。 由于牌手操作错误,导致赔付错误,现通知,当局失效,所有投注已撤回,请悉知!';
//            Notify::insert_one($mark, implode(',', array_unique($user_id_list)), 2);
//        }
//        if ($save) $this->success([]);
//        $this->failed('结算失败');
//    }

    /**
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * 原版的退还记录
     * 仅仅退还的是 投注记录 没有退还押金记录
     */
    public function retreat()
    {
        $id = $this->request->post('id/d', 0);
        if ($id <= 0) $this->failed('id参数错误');
        //1 查询露珠信息订单
        $lzfind = $this->model->where('id', $id)->find();
        if (empty($lzfind)) $this->failed('数据不存在');
        $lzfind = $lzfind->getData();
        //判断是否超过了24小时

        if ($lzfind['create_time'] + (24 * 60 * 60) < time()) {
            $this->failed('只能结算24小时内订单');
        }

        //2 查询该露珠下注的金额
        $records_list = GameRecords::where(['lu_zhu_id' => $id, 'close_status' => 2])
            ->field('id,user_id,lu_zhu_id,win_amt,shuffling_amt,shuffling_rate,agent_status,is_exempt')
            ->select()
            ->toArray();

        if (empty($records_list)) {
            $this->model->where('id', $id)->update(['status' => 3, 'remark' => '作废人：ID-' . session('admin_user.id') . '名称：' . session('admin_user.user_name'), 'update_time' => time()]);
            $this->success([]);
        }

        //查询每个本局的所有输赢，返回给用户的金额 //本局所有下注的用户和输赢
        $user_records_list = GameRecords::where(['lu_zhu_id' => $id, 'close_status' => 2])
            ->field('user_id,sum(win_amt) user_win_amt,sum(shuffling_amt) xima_amt,sum(shuffling_num) xima_sum,game_type,agent_status,is_exempt')
            ->group('user_id')
            ->select()
            ->toArray();

        //3 退还该露珠的金额
        $save = false;
        $user_id_list = [];
        Db::startTrans();
        try {
            $this->model->where('id', $id)->update(['status' => 3, 'remark' => '作废人：ID-' . session('admin_user.id') . '名称：' . session('admin_user.user_name'), 'update_time' => time()]);
            GameRecords::where(['lu_zhu_id' => $id])->update(['close_status' => 3]);

            foreach ($user_records_list as $key => $value) {
                $find = UserModel::where('id', $value['user_id'])->lock(true)->find();
                if (empty($find)) continue;
                //返回用户下注金额  如果是输了的  负负的正，就是加上了
                if ($value['is_exempt'] == 1 || $value['agent_status'] == 0) {//免佣无洗码费，洗码费还没结算
                    $value['xima_amt'] = 0;
                    UserModel::where('id', $value['user_id'])
                        ->dec('money_balance', $value['user_win_amt'])//下注扣除
                        ->update();
                } else {
                    UserModel::where('id', $value['user_id'])
                        ->dec('money_freeze', $value['xima_amt'])//洗码费扣除
                        ->dec('money_balance', $value['user_win_amt'])//下注扣
                        ->update();
                }

                //插入资金记录
                $money = $value['user_win_amt'] * -1;
                $mark = $value['user_win_amt'] > 0 ? '露珠作废扣除下注金额：' . $money : '露珠作废返回下注金额：' . $money;

                MoneyLog::post_insert_log(2, 509,
                    $find->money_balance, $find->money_balance - $value['user_win_amt'],
                    $money, $find->id, $id,
                    $mark . ',洗码费扣除：' . $value['xima_amt']
                );
                array_push($user_id_list, $find->id . '-');
                ########返回用户下注金额 洗码费结束
                ###返代理洗码费开始#############
                //1 获取用户的所有代理
                if ($value['is_exempt'] == 1 || $value['agent_status'] == 0) continue;
                if ($find->agent_id <= 0) continue;
                $agent_list = AgentLavel::where('agent_id', $find->agent_id)->column('agent_pid');
                if (empty($agent_list)) continue;
                array_push($agent_list, $find->agent_id);
                //2 查询代理的洗码率
                $xima_list = UserSet::where('u_id', 'in', $agent_list)->field('xima_lv,u_id')->select()->toArray();
                //3 返回代理洗码费
                if (empty($xima_list)) continue;
                foreach ($xima_list as $k => $item) {
                    $agent_find = UserModel::where('id', $item['u_id'])->find();
                    if (empty($find)) continue;
                    UserModel::where('id', $item['u_id'])
                        ->dec('money_freeze', ($value['xima_sum'] * $item['xima_lv'] / 100))//洗码费扣除
                        ->update();
                    array_push($user_id_list, $agent_find->id . '-');
                    MoneyLog::post_insert_log(2, 702,
                        $agent_find->money_freeze, $agent_find->money_freeze - ($value['xima_sum'] * $item['xima_lv'] / 100),
                        ($value['xima_sum'] * $item['xima_lv'] / 100), $agent_find->id, $id,
                        '露珠作废扣除洗码费扣除：' . ($value['xima_sum'] * $item['xima_lv'] / 100)
                    );
                }
            }
            $save = true;
            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
        if ($save && !empty($user_id_list)) {
            $mark = '尊敬的用户,' . date('Y-m-d H:i:s', $lzfind['create_time']) . ',' . $lzfind['table_id'] . '号' . $lzfind['xue_number'] . '靴' . $lzfind['pu_number'] . '铺。 由于牌手操作错误,导致赔付错误,现通知,当局失效,所有投注已撤回,请悉知!';
            Notify::insert_one($mark, implode(',', array_unique($user_id_list)), 2);
        }
        if ($save) $this->success([]);
        $this->failed('结算失败');
    }
}