<?php


namespace app\controller\game;

use app\controller\Base;

use app\model\GameRecords as models;
use app\model\MoneyLog;
use app\model\UserModel;
use app\traits\GatUserAuthTrait;
use app\traits\PublicCrudTrait;
use think\facade\Db;


class Records extends Base
{
    protected $model;
    use PublicCrudTrait;
    use GatUserAuthTrait;

    /**
     * 下注控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function index()
    {

        $page = $this->request->post('page', 1); //当前页
        $limit = $this->request->post('limit', 10);//每页显示数量
        $post = ($this->request->post());

        $map = $date = [];
        // isset($post['id']) && $map [] = ['a.id', '=', $post['id']];
        isset($post['start']) && $date['start'] = $post['start'];
        isset($post['end']) && $date['end'] = $post['end'];
        $where = $map;


        isset($post['status']) && $map [] = ['close_status', '=', $post['status']];
        if (isset($post['user_name'])) {//查询指定用户的
            $map[] = $this->map_user_name($post['user_name'],'direct_list','user_id');
            $where[] = $this->map_user_name($post['user_name'],'direct_list','uid');
        }elseif (isset($post['is_fictitious'])) {
            switch ($post['is_fictitious']){
                case 0:
                    $map[] = ['user_id','in',$this->request->admin_user->user_all_list];
                    break;
                case 1:
                    $map[] = ['user_id','in',$this->request->admin_user->user_fictitious_list];
                    break;
                case 2:
                    $map[] = ['user_id','in',$this->request->admin_user->user_demo_list];
                    break;
            }
        }else{
            $map[] = ['user_id','in',$this->request->admin_user->user_all_list];
            $where[] = ['uid','in',$this->request->admin_user->user_all_list];
        }

        $list = $this->model->page_list($map, $limit, $page, $date); //查询下注列表
        $list = $list->toArray();
        $map[]= ['close_status','=',2];
        $list['money'] = $this->model->count_money($date, $map); //查询用户下注金额
        $where[]  = ['status','in',MoneyLog::$game_order_status];  //查询用户盈亏
        $list['money']['t_win_amt'] = (new MoneyLog())->count_money( $where,[],$date); //查询用户盈亏
        $this->success($list);
    }

    public function edit()
    {
        $postField = 'id,user_id,lu_zhu_id,bet_amt,before_amt,end_amt,detail,win_amt,shuffling_num,shuffling_rate,';
        $postField .= 'shuffling_amt,result,delta_amt,table_id,xue_number,pu_number,game_type,close_status,agent_status';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $post = array_filter($post);
        if (!isset($post['id']) && $post <= 0) {
            $this->failed('ID不存在');
        }
        $save = $this->model->update($post);

        if ($save) $this->success([]);
        $this->failed('修改失败');
    }

    public function retreat()
    {
        if ($this->request->admin_user->agent) {
            $this->failed('代理不可操作');
        }
        //退还订单
        $id = $this->request->post('id/d', 0);
        if ($id <= 0) $this->failed('id参数错误');
        $find = $this->model->where('id', $id)->find();
        if (empty($find)) $this->failed('数据不存在');
        $user = UserModel::where('id', $find->user_id)->find();
        if (empty($user)) $this->failed('该用户是虚拟用户，不用退还');
        if ($user->type != 2) $this->failed('该用户不是正式会员');

        $save = false;
        Db::startTrans();
        try {
            $retreat_money = $find->bet_amt+$find->deposit_amt;
            //1 修改用户金额 2 修改当前订单为作废订单  3 插入日志
            UserModel::where('id', $find->user_id)->inc('money_balance', $retreat_money)->update();
            $this->model->where('id', $id)->update(['close_status' => 3]);
            MoneyLog::post_insert_log(1,509,$user->money_balance,
                $user->money_balance + $retreat_money,$retreat_money,$user->id,$id,
                '下注订单未结算退还,订单ID:' . $id . ',操作人:' . $this->request->admin_user->user_name,
                '',$this->request->admin_user->id);
            // 提交事务
            $save = true;
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }

        if ($save) $this->success([]);
        $this->failed('结算失败');
    }
}